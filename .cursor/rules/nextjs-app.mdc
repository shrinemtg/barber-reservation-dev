---
description: 
globs: 
alwaysApply: true
---


あなたはTypeScript、Node.js、Next.jsのApp Router、React、Shadcn UI、Radix UI、Tailwindに関する専門家です。

コードスタイルと構造
– 簡潔で技術的なTypeScriptコードを書き、正確な例を示すこと。
– 関数型および宣言型プログラミングパターンを使用し、クラスは避けること。
– コードの重複を避け、イテレーションとモジュール化を優先すること。
– 補助動詞を用いた説明的な変数名を使用する（例：isLoading、hasError）。
– ファイル構造：エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型。

命名規則
– ディレクトリには小文字とダッシュを使用する（例：components/auth-wizard）。
– コンポーネントには名前付きエクスポートを優先する。

TypeScriptの使用
– すべてのコードにTypeScriptを使用し、型よりインターフェースを優先する。
– 列挙型は避け、代わりにマップを使用する。
– TypeScriptインターフェースを使用した関数型コンポーネントを使用する。

構文とフォーマット
– 純粋な関数には「function」キーワードを使用する。
– 条件文では不要な中括弧を避け、簡潔な構文を使用する。
– 宣言的なJSXを使用する。

UIとスタイリング
– コンポーネント基盤にはShadcn UIおよびRadix UIを使用する。
– Tailwind CSSを使用してレスポンシブデザインを実装し、モバイルファーストアプローチを採用する。
– コンポーネント固有のスタイルにはStylusをCSSモジュールとして使用：
– カスタムスタイリングが必要な各コンポーネントに対して.module.stylファイルを作成する。
– Stylusファイル内のクラス名にはケバブケースを使用する。
– 効率的なスタイリングのために、Stylusのネスト、変数、ミキシンなどの機能を活用する。
– Stylusモジュール内で一貫したCSSクラスの命名規則を実装する。
– ユーティリティクラスと迅速なプロトタイピングのためにTailwindを使用する。
– TailwindユーティリティクラスとStylusモジュールを組み合わせたハイブリッドアプローチを採用：
– 一般的なユーティリティとレイアウトにはTailwindを使用。
– 複雑な、コンポーネント固有のスタイルにはStylusモジュールを使用。
– @applyディレクティブは使用しない。

スタイリングのファイル構造
– Stylusモジュールファイルは対応するコンポーネントファイルの隣に配置する。
– 例の構造：
“ components/ Button/ Button.js Button.module.styl Card/ Card.js Card.module.styl “

Stylusのベストプラクティス
– 色、フォント、その他の繰り返し値には変数を使用する。
– 一般的に使用されるスタイルパターンにはミキシンを作成する。
– ネストおよび擬似クラスのためにStylusの親セレクタ（&）を活用する。
– 深いネストを避けて特異性を低く保つ。

パフォーマンス最適化
– ‘use client’、’useEffect’、’setState’を最小限に抑え、React Server Components（RSC）を優先する。
– クライアントコンポーネントはSuspenseでラップし、フォールバックを設定する。
– 非重要なコンポーネントには動的読み込みを使用する。
– 画像を最適化する：WebPフォーマットを使用し、サイズデータを含め、レイジーローディングを実装する。

主要な規則
– URL検索パラメータの状態管理には’nuqs’を使用する。
– Web Vitals（LCP、CLS、FID）を最適化する。
– ‘use client’を制限する：
– サーバーコンポーネントとNext.jsのSSRを優先する。
– 小さなコンポーネントでのWeb APIアクセスのみに使用する。
– データフェッチや状態管理には使用しない。

データフェッチ、レンダリング、ルーティングについてはNext.jsのドキュメントに従ってください。